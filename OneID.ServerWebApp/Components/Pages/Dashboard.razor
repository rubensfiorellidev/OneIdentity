@page "/dashboard"
@rendermode InteractiveServer
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager Navigation
@inject IHttpContextAccessor HttpContextAccessor

@using System.IdentityModel.Tokens.Jwt
@using System.Net.Http.Headers
@using System.Text.Json
@using System.Text

@code {
    private string OperatorName = "usuário";
    private string Email = "desconhecido";
    private List<string> Roles = [];
    private List<PendingProcessDto> PendingProcesses = [];
    private bool ExpandGrid = false;

    protected override async Task OnInitializedAsync()
    {
        var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
        ExpandGrid = uri.Query.Contains("expand");

        var token = HttpContextAccessor.HttpContext?.Request.Cookies["access_token"];
        if (string.IsNullOrWhiteSpace(token))
        {
            OperatorName = "usuário não autenticado";
            return;
        }

        try
        {
            var handler = new JwtSecurityTokenHandler();
            var jwt = handler.ReadJwtToken(token);
            OperatorName = jwt.Claims.FirstOrDefault(c => c.Type == "name")?.Value ?? "usuário";
            Email = jwt.Claims.FirstOrDefault(c => c.Type == "email")?.Value ?? "não informado";

            var rolesClaim = jwt.Claims.FirstOrDefault(c => c.Type == "roles")?.Value;
            if (!string.IsNullOrEmpty(rolesClaim))
            {
                Roles = JsonSerializer.Deserialize<List<string>>(rolesClaim) ?? [];
            }
        }
        catch
        {
            OperatorName = "erro ao ler token";
        }

        try
        {
            var client = HttpClientFactory.CreateClient();
            client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

            var response = await client.GetAsync("https://localhost:7200/v1/pendings");
            if (response.IsSuccessStatusCode)
            {
                var list = await response.Content.ReadFromJsonAsync<List<PendingProcessDto>>();
                PendingProcesses = list ?? [];
            }
        }
        catch
        {
            // Log opcional
        }
    }

    private async Task ResumeProcess(string correlationId)
    {
        var token = HttpContextAccessor.HttpContext?.Request.Cookies["access_token"];
        if (string.IsNullOrWhiteSpace(token))
        {
            Navigation.NavigateTo("/login");
            return;
        }

        var client = HttpClientFactory.CreateClient();
        client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

        var payload = new { CorrelationId = correlationId };
        var content = new StringContent(JsonSerializer.Serialize(payload), Encoding.UTF8, "application/json");

        var response = await client.PostAsync("https://localhost:7200/v1/staging/resume", content);
        if (!response.IsSuccessStatusCode)
        {
            return;
        }

        var json = await response.Content.ReadFromJsonAsync<JsonElement>();
        var requestToken = json.GetProperty("token").GetString();
        var resumedCorrelationId = json.GetProperty("correlationId").GetString();

        if (!string.IsNullOrEmpty(resumedCorrelationId))
        {
            HttpContextAccessor.HttpContext?.Response.Cookies.Append("correlation_id", resumedCorrelationId!, new CookieOptions
            {
                HttpOnly = true,
                Secure = true,
                SameSite = SameSiteMode.Strict,
                Expires = DateTimeOffset.UtcNow.AddMinutes(5)
            });
        }

        if (!string.IsNullOrEmpty(requestToken))
        {
            HttpContextAccessor.HttpContext?.Response.Cookies.Append("request_token", requestToken!, new CookieOptions
            {
                HttpOnly = true,
                Secure = true,
                SameSite = SameSiteMode.Strict,
                Expires = DateTimeOffset.UtcNow.AddMinutes(5)
            });
        }

        Navigation.NavigateTo("/confirm-code");
    }

    public class PendingProcessDto
    {
        public required string CorrelationId { get; set; }
        public required string FullName { get; set; }
        public DateTime CreatedAt { get; set; }
    }
}

<style>
    /* mesmo CSS original colado aqui... */
</style>

<div class="container">
    <h1>Bem-vindo, @OperatorName!</h1>
    <div class="info">Email: @Email</div>

    @if (Roles?.Any() == true)
    {
        <div class="roles">
            <strong>Suas Roles:</strong>
            <ul>
                @foreach (var role in Roles)
                {
                    <li>@role</li>
                }
            </ul>
        </div>
    }
    else
    {
        <div class="roles">Nenhuma role atribuída.</div>
    }

    <a href="/manual-admission" class="external-link" target="_blank" rel="noopener noreferrer">
        Iniciar Nova Admissão
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" width="14" height="14" style="margin-left: 6px;">
            <path fill-rule="evenodd" d="M12.293 2.293a1 1 0 011.414 0l4 4a1 1 0 01-1.414 1.414L14 5.414V13a1 1 0 11-2 0V5.414l-2.293 2.293A1 1 0 018.293 6.293l4-4z" clip-rule="evenodd" />
            <path fill-rule="evenodd" d="M3 9a1 1 0 011-1h6a1 1 0 110 2H5v6a1 1 0 11-2 0V9z" clip-rule="evenodd" />
        </svg>
    </a>
</div>

@if (PendingProcesses?.Any() == true)
{
    <div class="container-table">
        <div class="pending-widget">
            <h2>Processos pendentes de confirmação</h2>
            <ul>
                @foreach (var item in ExpandGrid ? PendingProcesses : PendingProcesses.Take(5))
                {
                    <li>
                        <span>@item.FullName</span>
                        <button @onclick="() => ResumeProcess(item.CorrelationId)" class="resume-button">Retomar</button>
                    </li>
                }
            </ul>
            @if (!ExpandGrid)
            {
                <a href="/dashboard?expand=true" target="_blank" class="footer-link">Ver todos ⤴</a>
            }
        </div>
    </div>
}
