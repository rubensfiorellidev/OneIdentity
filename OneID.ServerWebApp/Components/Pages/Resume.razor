@page "/resume"
@rendermode InteractiveServer

@using System.Net.Http.Headers
@using System.Text.Json
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IHttpContextAccessor HttpContextAccessor

<PageTitle>Processos de Admissão Pendentes</PageTitle>

<div class="flex justify-center items-center min-h-screen bg-zinc-900 text-white">
    <div class="w-full max-w-3xl p-8 rounded-2xl shadow-xl bg-zinc-800">
        <h1 class="text-2xl font-bold mb-6">Processos de admissão pendentes</h1>

        @if (pendingProcesses.Any())
        {
            <table class="w-full text-left table-auto border-collapse">
                <thead>
                    <tr class="border-b border-zinc-700 text-zinc-400 text-sm">
                        <th class="py-2">Nome</th>
                        <th class="py-2">Data de criação</th>
                        <th class="py-2">Ações</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in pendingProcesses)
                    {
                        <tr class="border-b border-zinc-700 hover:bg-zinc-700/40">
                            <td class="py-2">@item.FullName</td>
                            <td class="py-2">@item.CreatedAt.ToLocalTime().ToString("dd/MM/yyyy HH:mm")</td>
                            <td class="py-2">
                                <button class="text-green-400 hover:text-green-300 font-medium" @onclick="() => ResumeSingle(item.CorrelationId)">Retomar</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        else
        {
            <p class="text-zinc-400">Nenhum processo pendente encontrado.</p>
        }

        @if (!string.IsNullOrEmpty(resultMessage))
        {
            <div class="mt-6 text-sm text-yellow-400">@resultMessage</div>
        }
    </div>
</div>

@code {
    private List<PendingProcessDto> pendingProcesses = new();
    private string resultMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var token = HttpContextAccessor.HttpContext?.Request.Cookies["access_token"];
        if (string.IsNullOrWhiteSpace(token))
        {
            resultMessage = "Token ausente. Faça login novamente.";
            return;
        }

        Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

        var response = await Http.GetAsync("https://localhost:7200/v1/staging/pending");
        if (!response.IsSuccessStatusCode)
        {
            resultMessage = "Falha ao buscar processos pendentes.";
            return;
        }

        var list = await response.Content.ReadFromJsonAsync<List<PendingProcessDto>>();
        pendingProcesses = list ?? [];
    }

    private async Task ResumeSingle(string correlationId)
    {
        var token = HttpContextAccessor.HttpContext?.Request.Cookies["access_token"];
        if (string.IsNullOrEmpty(token))
        {
            resultMessage = "Token ausente.";
            return;
        }

        Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

        var payload = new { CorrelationId = correlationId };
        var content = new StringContent(JsonSerializer.Serialize(payload), System.Text.Encoding.UTF8, "application/json");

        var response = await Http.PostAsync("https://localhost:7200/v1/staging/resume", content);

        if (!response.IsSuccessStatusCode)
        {
            var error = await response.Content.ReadAsStringAsync();
            resultMessage = $"Erro ao retomar: {error}";
            return;
        }

        var json = await response.Content.ReadFromJsonAsync<JsonElement>();
        var requestToken = json.GetProperty("token").GetString();
        var correlation = json.GetProperty("correlationId").GetString();

        HttpContextAccessor.HttpContext?.Response.Cookies.Append("correlation_id", correlation!, new CookieOptions
        {
            HttpOnly = true,
            Secure = true,
            SameSite = SameSiteMode.Strict,
            Expires = DateTimeOffset.UtcNow.AddMinutes(5)
        });

        HttpContextAccessor.HttpContext?.Response.Cookies.Append("request_token", requestToken!, new CookieOptions
        {
            HttpOnly = true,
            Secure = true,
            SameSite = SameSiteMode.Strict,
            Expires = DateTimeOffset.UtcNow.AddMinutes(5)
        });

        Navigation.NavigateTo("/confirm-code");
    }

    private class PendingProcessDto
    {
        public string CorrelationId { get; set; } = string.Empty;
        public string FullName { get; set; } = string.Empty;
        public DateTime CreatedAt { get; set; }
    }
}
