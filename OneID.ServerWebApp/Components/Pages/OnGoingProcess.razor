@page "/ongoing-processes"
@rendermode InteractiveServer

@inject HttpClient Http
@inject IHttpContextAccessor HttpContextAccessor

@using System.Net.Http.Headers
@using System.Text.Json

<style>
    body {
        margin: 0;
        padding: 0;
        background-color: #343541;
        color: white;
        font-family: 'Segoe UI', sans-serif;
        display: flex;
        flex-direction: column;
        align-items: center;
        padding: 2rem;
    }

    h1 {
        margin-bottom: 1rem;
    }

    table {
        width: 100%;
        max-width: 1200px;
        border-collapse: collapse;
        background-color: #40414f;
        border-radius: 8px;
        overflow: hidden;
        box-shadow: 0 0 10px #00000033;
    }

    thead {
        background-color: #202123;
    }

    th, td {
        padding: 0.75rem 1rem;
        text-align: left;
    }

    th {
        color: #90ee90;
        font-weight: 600;
    }

    tbody tr:nth-child(even) {
        background-color: #2c2d3b;
    }

    tbody tr:hover {
        background-color: #565869;
        cursor: pointer;
    }

    .empty {
        margin-top: 2rem;
        color: #bbb;
    }
</style>

<h1>Processos de Admissão em Andamento</h1>

@if (Processes?.Any() == true)
{
    <table>
        <thead>
            <tr>
                <th>ID</th>
                <th>CorrelationId</th>
                <th>Nome</th>
                <th>Login</th>
                <th>Status</th>
                <th>Evento</th>
                <th>Data</th>
                <th>Descrição</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var process in Processes)
            {
                <tr>
                    <td>@process.Id</td>
                    <td>@process.CorrelationId</td>
                    <td>@($"{process.FirstName} {process.LastName}")</td>
                    <td>@process.Login</td>
                    <td>@process.CurrentState</td>
                    <td>@process.EventName</td>
                    <td>@process.ProvisioningDate.ToString("dd/MM/yyyy HH:mm")</td>
                    <td>@process.Description</td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <div class="empty">Nenhum processo em andamento no momento.</div>
}

@code {
    private List<AdmissionProcessViewModel> Processes = new();

    protected override async Task OnInitializedAsync()
    {
        var token = HttpContextAccessor.HttpContext?.Request.Cookies["access_token"];
        if (string.IsNullOrWhiteSpace(token)) return;

        Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

        try
        {
            var result = await Http.GetFromJsonAsync<List<AdmissionProcessViewModel>>("https://localhost:7200/v1/admissions/ongoing");
            if (result is not null)
                Processes = result;
        }
        catch
        {
            // Log or handle error silently
        }
    }

    private class AdmissionProcessViewModel
    {
        public string Id { get; set; } = default!;
        public string CorrelationId { get; set; } = default!;
        public string FirstName { get; set; } = default!;
        public string LastName { get; set; } = default!;
        public string Login { get; set; } = default!;
        public string CurrentState { get; set; } = default!;
        public string EventName { get; set; } = default!;
        public string Description { get; set; } = default!;
        public DateTime ProvisioningDate { get; set; }
    }
}
