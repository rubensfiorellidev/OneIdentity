@page "/active-users"
@rendermode InteractiveServer

@using OneID.WebApp.Components
@using OneID.WebApp.Models

@inject IOneIdUserService UserService

<PageTitle>Usuários Ativos</PageTitle>

<div class="card">
    <div class="card-header flex-between">
        <div class="flex-center">
            <input type="checkbox" @onchange="ToggleSelectAll" />
            <input class="search-box" type="text" placeholder="Pesquisar" @bind="searchTerm" @bind:event="oninput" />
            <button class="search-button" @onclick="ApplySearch">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-search">
                    <circle cx="11" cy="11" r="8" />
                    <path d="m21 21-4.35-4.35" />
                </svg>
            </button>
        </div>
        <button class="btn-danger" @onclick="DeactivateSelected" disabled="@(SelectedCount == 0)">
            Desativar selecionados (@SelectedCount)
        </button>
    </div>

    <div class="table-container">
        <table class="user-table">
            <thead>
                <tr>
                    <th></th>
                    <th>Nome</th>
                    <th>Cargo</th>
                    <th>Departamento</th>
                    <th>Empresa</th>
                    <th>Login</th>
                    <th>Status</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var user in FilteredUsers)
                {
                    <tr>
                        <td>
                            <input type="checkbox" @bind="user.IsSelected" />
                        </td>
                        <td>
                            <a href="/user-details/@user.Id" class="link-with-icon">
                                <span>@user.FullName</span>
                                <svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-external-link">
                                    <path d="M18 13v6a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6" />
                                    <polyline points="15 3 21 3 21 9" />
                                    <line x1="10" x2="21" y1="14" y2="3" />
                                </svg>
                            </a>
                        </td>
                        <td>@user.JobTitleName</td>
                        <td>@user.DepartmentName</td>
                        <td>@user.Company</td>
                        <td>@user.Login</td>
                        <td class="status">@user.Status</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

@code {
    private List<ActiveUserViewModel> AllUsers = [];
    private List<ActiveUserViewModel> FilteredUsers => string.IsNullOrWhiteSpace(searchTerm)
        ? AllUsers
        : AllUsers.Where(u => u.FullName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)
                           || u.Login.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)
                           || u.JobTitleName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)
                           || u.DepartmentName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
                  .ToList();

    private string searchTerm = string.Empty;

    private int SelectedCount => AllUsers.Count(u => u.IsSelected);

    protected override async Task OnInitializedAsync()
    {
        AllUsers = await UserService.GetActiveUsersAsync();
    }

    private void ToggleSelectAll(ChangeEventArgs e)
    {
        bool isChecked = (bool)e.Value!;
        foreach (var user in FilteredUsers)
            user.IsSelected = isChecked;
    }

    private void ApplySearch()
    {
        // Triggered by search button (optional)
    }

    private async Task DeactivateSelected()
    {
        var selectedIds = AllUsers.Where(u => u.IsSelected).Select(u => u.Id).ToList();
        await UserService.DeactivateUsersAsync(selectedIds);
        AllUsers.RemoveAll(u => selectedIds.Contains(u.Id));
    }

    public class ActiveUserViewModel
    {
        public string Id { get; set; } = string.Empty;
        public string FullName { get; set; } = string.Empty;
        public string JobTitleName { get; set; } = string.Empty;
        public string DepartmentName { get; set; } = string.Empty;
        public string Company { get; set; } = string.Empty;
        public string Login { get; set; } = string.Empty;
        public string Status { get; set; } = string.Empty;
        public bool IsSelected { get; set; } = false;
    }
}
