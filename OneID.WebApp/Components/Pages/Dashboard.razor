@page "/dashboard"
@rendermode InteractiveServer
@inject NavigationManager Navigation
@inject IHttpContextAccessor HttpContextAccessor
@inject IHttpClientFactory HttpClientFactory
@inject IJSRuntime JS
@inject HttpClient Http
@implements IDisposable

@using System.IdentityModel.Tokens.Jwt
@using System.Net.Http.Headers
@using System.Text.Json
@using System.Text
@using System.Globalization

<div class="custom-header">
    <div class="header-left-fixed" style="display: flex; align-items: center; gap: 0.8rem;">

        <a href="/dashboard" class="logo-wrapper" style="display: flex; align-items: center; gap: 0.4rem;">
            <img src="img/logo_one_id_prata_icone.png" alt="OneID Logo" width="26" height="26" />
            <span style="color: var(--text-muted); font-weight: 700;">OneID</span>
        </a>

        <span class="pipe-divider" style="color: #555;">|</span>

        <button class="menu-launcher-wrapper" @onclick="ToggleLauncher" style="background: none; border: none; padding: 0; cursor: pointer;">
            <svg xmlns="http://www.w3.org/2000/svg"
                 width="22" height="22" viewBox="0 0 24 24"
                 fill="var(--text-muted)">
                <circle cx="5" cy="5" r="2" />
                <circle cx="12" cy="5" r="2" />
                <circle cx="19" cy="5" r="2" />
                <circle cx="5" cy="12" r="2" />
                <circle cx="12" cy="12" r="2" />
                <circle cx="19" cy="12" r="2" />
                <circle cx="5" cy="19" r="2" />
                <circle cx="12" cy="19" r="2" />
                <circle cx="19" cy="19" r="2" />
            </svg>
        </button>

        <div class="search-wrapper">
            <svg xmlns="http://www.w3.org/2000/svg" class="search-icon" width="16" height="16"
                 fill="none" stroke="var(--highlight-color)" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"
                 viewBox="0 0 24 24">
                <circle cx="11" cy="11" r="8" />
                <line x1="21" y1="21" x2="16.65" y2="16.65" />
            </svg>
            <input type="text"
                   placeholder="Search"
                   class="search-input"
                   @oninput="OnSearchInput" />
        </div>
    </div>

    <div class="header-right">
        <div class="email"><strong>@Email</strong></div>
        <div class="account-id">Conta: <span class="account-id-value">@AccountId</span></div>
    </div>
</div>

<ServiceLauncher IsVisible="@showLauncher" Toggle="ToggleLauncher" />

<div class="grid-layout">
    <div id="widget-pendentes" class="pending-widget resizable-widget">
        <h2>
            <svg xmlns="http://www.w3.org/2000/svg"
                 width="20" height="20"
                 viewBox="0 0 24 24"
                 fill="none"
                 stroke="currentColor"
                 stroke-width="2"
                 stroke-linecap="round"
                 stroke-linejoin="round"
                 style="margin-right: 0.4rem; vertical-align: middle;">
                <path d="M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2" />
                <circle cx="9" cy="7" r="4" />
                <line x1="19" x2="19" y1="8" y2="14" />
                <line x1="22" x2="16" y1="11" y2="11" />
            </svg>
            Processos pendentes de confirmação
        </h2>
        <ul class="@(ExpandGrid ? "scrollable" : "")">
            @foreach (var item in ExpandGrid ? PendingProcesses : PendingProcesses.Take(4))
            {
                <li>
                    <div style="display: flex; flex-direction: column;">
                        <span>@item.FullName</span>
                        <div style="font-size: 0.75rem; color: var(--text-muted); display: flex; align-items: center; gap: 0.4rem;">
                            <span>@item.CorrelationId</span>
                            <svg @onclick="@(() => CopiarId(item.CorrelationId))"
                                 xmlns="http://www.w3.org/2000/svg"
                                 viewBox="0 0 24 24"
                                 style="width: 14px; height: 14px; fill: var(--highlight-color); cursor: pointer;">
                                <path d="M16 1H4a2 2 0 0 0-2 2v14h2V3h12V1zm3 4H8a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h11a2 2 0 0 0 2-2V7a2 2 0 0 0-2-2zm0 16H8V7h11v14z" />
                            </svg>
                        </div>
                    </div>
                    <button class="resume-button" title="Retomar processo" @onclick="() => Resume(item.CorrelationId)">
                        <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="var(--highlight-color)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round">
                            <path d="M6.67742 20.5673C2.53141 18.0212 0.758026 12.7584 2.71678 8.1439C4.87472 3.0601 10.7453 0.68822 15.8291 2.84617C20.9129 5.00412 23.2848 10.8747 21.1269 15.9585C20.2837 17.945 18.8736 19.5174 17.1651 20.5673" />
                            <path d="M17 16V20.4C17 20.7314 17.2686 21 17.6 21H22" />
                            <path d="M12 22.01L12.01 21.9989" />
                        </svg>
                    </button>
                </li>
            }
        </ul>

        <a @onclick="ToggleExpand" class="footer-link expand-toggle">
            <svg class="expand-icon" xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="var(--highlight-color)" viewBox="0 0 24 24">
                <path d="@(!ExpandGrid ? "M12 5l-7 7h14z" : "M12 19l7-7H5z")" />
            </svg>
            @(ExpandGrid ? "Ver menos" : "Ver todos")
        </a>
    </div>

    <div id="widget-status" class="pending-widget resizable-widget">
        <h2>
            <svg width="20px" height="20px" stroke-width="1.5" viewBox="0 0 24 24" fill="none"
                 xmlns="http://www.w3.org/2000/svg" style="margin-right: 0.4rem; vertical-align: middle;" stroke="currentColor">
                <path d="M18 20L21.8243 16.1757C21.9368 16.0632 22 15.9106 22 15.7515V10.5C22 9.67157 21.3284 9 20.5 9V9C19.6716 9 19 9.67157 19 10.5V15"
                      stroke-linecap="round" stroke-linejoin="round" />
                <path d="M18 16L18.8581 15.1419C18.949 15.051 19 14.9278 19 14.7994V14.7994C19 14.6159 18.8963 14.4482 18.7322 14.3661L18.2893 14.1447C17.5194 13.7597 16.5894 13.9106 15.9807 14.5193L15.0858 15.4142C14.7107 15.7893 14.5 16.298 14.5 16.8284V20"
                      stroke-linecap="round" stroke-linejoin="round" />
                <path d="M6 20L2.17574 16.1757C2.06321 16.0632 2 15.9106 2 15.7515V10.5C2 9.67157 2.67157 9 3.5 9V9C4.32843 9 5 9.67157 5 10.5V15"
                      stroke-linecap="round" stroke-linejoin="round" />
                <path d="M6 16L5.14187 15.1419C5.05103 15.051 5 14.9278 5 14.7994V14.7994C5 14.6159 5.10366 14.4482 5.26776 14.3661L5.71067 14.1447C6.48064 13.7597 7.41059 13.9106 8.01931 14.5193L8.91421 15.4142C9.28929 15.7893 9.5 16.298 9.5 16.8284V20"
                      stroke-linecap="round" stroke-linejoin="round" />
                <path d="M13.6667 12H10.3333V9.66667H8V6.33333H10.3333V4H13.6667V6.33333H16V9.66667H13.6667V12Z"
                      stroke-linecap="round" stroke-linejoin="round" />
            </svg>
            Status do OneID
        </h2>
        <ul>
            <li>
                <span>Autenticação</span><span class="status-online">Online</span>
            </li>
            <li>
                <span>Provisionamento</span><span class="status-online">Online</span>
            </li>
            <li>
                <span>Comunicação externa</span><span class="status-online">Online</span>
            </li>
        </ul>
        <div style="margin-top: 1rem; font-size: 0.85rem; color: var(--text-muted); text-align: right;">
            Última verificação: @LastChecked
        </div>
    </div>

    <div id="widget-usuarios" class="pending-widget resizable-widget">
        <h2>
            <svg xmlns="http://www.w3.org/2000/svg"
                 width="20"
                 height="20"
                 viewBox="0 0 24 24"
                 fill="none"
                 stroke="var(--highlight-color)"
                 stroke-width="2"
                 stroke-linecap="round"
                 stroke-linejoin="round"
                 class="lucide lucide-id-card-lanyard-icon"
                 style="margin-right: 0.4rem; vertical-align: middle;">
                <path d="M13.5 8h-3" />
                <path d="m15 2-1 2h3a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h3" />
                <path d="M16.899 22A5 5 0 0 0 7.1 22" />
                <path d="m9 2 3 6" />
                <circle cx="12" cy="15" r="3" />
            </svg>
            Usuários ativos
        </h2>

        <ul>
            @if (ActiveUsers.Count == 0)
            {
                <li><span class="muted">Nenhum usuário ativo no momento</span></li>
            }
            else
            {
                @foreach (var user in ActiveUsers.Take(5))
                {
                    <li style="margin-bottom: 0.8rem;">
                        <div style="display: flex; flex-direction: column;">
                            <div style="display: flex; align-items: center; gap: 0.5rem;">
                                <span style="
                                    display: inline-block;
                                    width: 10px;
                                    height: 10px;
                                    border-radius: 50%;
                                    background-color: #00c853;
                                    box-shadow: 0 0 4px #00c853;
                                "></span>
                                <strong>@user.UpnOrName</strong>
                                @if (user.IsExpiringSoon)
                                {
                                    <span style="
                                        background-color: #ff4d4f;
                                        color: white;
                                        padding: 0.1rem 0.5rem;
                                        border-radius: 1rem;
                                        font-size: 0.7rem;
                                        font-weight: 500;
                                    ">
                                        Expirando
                                    </span>
                                }
                            </div>
                            <span class="muted">Endereço IP: @user.IpAddress</span>
                            <span class="muted">
                                Última atividade: @user.LastActivity.ToLocalTime().ToString("dd/MM/yyyy HH:mm:ss")
                            </span>
                            <span class="muted">Token expira em: @FormatRemainingTime(user.TimeToExpire)</span>
                            <span class="muted"> @ParseUserAgent(user.UserAgent)</span>
                        </div>
                    </li>
                }
            }
        </ul>

        <a @onclick="VerTodosUsuarios" class="footer-link expand-toggle">
            <svg class="expand-icon" xmlns="http://www.w3.org/2000/svg"
                 width="16" height="16" fill="var(--highlight-color)" viewBox="0 0 24 24">
                <path d="M12 5l-7 7h14z" />
            </svg>
            Ver todos os usuários
        </a>
    </div>

</div>

<div class="admissions-wrapper">
    <div id="widget-admissoes" class="admissions-widget resizable-widget">
        <h2>
            <svg xmlns="http://www.w3.org/2000/svg"
                 width="20" height="20"
                 viewBox="0 0 24 24"
                 fill="none"
                 stroke="var(--highlight-color)"
                 stroke-width="2"
                 stroke-linecap="round"
                 stroke-linejoin="round"
                 style="margin-right: 0.4rem; vertical-align: middle;">
                <path d="M20 13c0 5-3.5 7.5-7.66 8.95a1 1 0 0 1-.67-.01C7.5 20.5 4 18 4 13V6a1 1 0 0 1 1-1c2 0 4.5-1.2 6.24-2.72a1.17 1.17 0 0 1 1.52 0C14.51 3.81 17 5 19 5a1 1 0 0 1 1 1z" />
                <path d="M6.376 18.91a6 6 0 0 1 11.249.003" />
                <circle cx="12" cy="11" r="4" />
            </svg>
            Admissões recentes
        </h2>

        <ul>
            @foreach (var item in RecentAdmissions.Take(10))
            {
                <li>
                    <div class="date-box">
                        <div class="month">@item.ProvisioningAt.ToString("MMM").ToUpper()</div>
                        <div class="day">@item.ProvisioningAt.Day</div>
                    </div>
                    <div class="admission-info">
                        <a class="external-link" href="@($"/admission-details/{item.AccountId}")" target="_blank">
                            <strong>@item.FullName</strong>
                            <svg xmlns="http://www.w3.org/2000/svg" class="external-icon" viewBox="0 0 24 24" width="14" height="14">
                                <path fill="currentColor" d="M14 3h7v7h-2V6.41l-9.29 9.3-1.42-1.42L17.59 5H14V3z" />
                                <path fill="currentColor" d="M5 5h7V3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2v-7h-2v7H5V5z" />
                            </svg>
                        </a>
                        <div class="muted">@item.JobTitleName</div>
                        <div class="muted">@item.DepartmentName</div>
                        <div class="muted">@item.Company</div>
                        <div class="muted" title="@item.AccountId">ID: @item.AccountId[..8]...</div>
                    </div>
                </li>
            }
        </ul>
    </div>

    <div id="widget-atividades" class="admissions-widget resizable-widget">
        <h2>
            <svg xmlns="http://www.w3.org/2000/svg"
                 width="20"
                 height="20"
                 viewBox="0 0 24 24"
                 fill="none"
                 stroke="var(--highlight-color)"
                 stroke-width="2"
                 stroke-linecap="round"
                 stroke-linejoin="round"
                 class="lucide lucide-cloud-upload-icon"
                 style="margin-right: 0.5rem; vertical-align: middle;">
                <path d="M12 13v8" />
                <path d="M4 14.899A7 7 0 1 1 15.71 8h1.79a4.5 4.5 0 0 1 2.5 8.242" />
                <path d="m8 17 4-4 4 4" />
            </svg>
            Atividades recentes no IAM
        </h2>

        <ul>
            @foreach (var item in RecentIamLogs)
            {
                <li class="log-entry">
                    <div><strong>@item.Actor</strong> @item.Action <strong>@item.Target</strong></div>
                    <div class="timestamp">@item.Timestamp.ToString("HH:mm")</div>
                </li>
            }
        </ul>
    </div>

    <div id="widget-alertas" class="admissions-widget resizable-widget">
        <h2>
            <svg xmlns="http://www.w3.org/2000/svg"
                 width="20"
                 height="20"
                 viewBox="0 0 24 24"
                 fill="none"
                 stroke="var(--highlight-color)"
                 stroke-width="2"
                 stroke-linecap="round"
                 stroke-linejoin="round"
                 class="lucide lucide-shield-alert-icon"
                 style="margin-right: 0.5rem; vertical-align: middle;">
                <path d="M20 13c0 5-3.5 7.5-7.66 8.95a1 1 0 0 1-.67-.01C7.5 20.5 4 18 4 13V6a1 1 0 0 1 1-1c2 0 4.5-1.2 6.24-2.72a1.17 1.17 0 0 1 1.52 0C14.51 3.81 17 5 19 5a1 1 0 0 1 1 1z" />
                <path d="M12 8v4" />
                <path d="M12 16h.01" />
            </svg>
            Alertas de segurança
        </h2>

        <ul>
            @foreach (var alert in SecurityAlerts)
            {
                <li class="alert-entry" data-level="@alert.Level">
                    <div><strong>@alert.Title</strong></div>
                    <div class="timestamp">@alert.Timestamp.ToString("HH:mm")</div>
                </li>
            }
        </ul>
    </div>

    <div id="widget-auditoria" class="admissions-widget resizable-widget">
        <h2>
            <svg xmlns="http://www.w3.org/2000/svg"
                 width="20"
                 height="20"
                 viewBox="0 0 24 24"
                 fill="none"
                 stroke="var(--highlight-color)"
                 stroke-width="2"
                 stroke-linecap="round"
                 stroke-linejoin="round"
                 class="lucide lucide-radar-icon"
                 style="margin-right: 0.5rem; vertical-align: middle;">
                <path d="M19.07 4.93A10 10 0 0 0 6.99 3.34" />
                <path d="M4 6h.01" />
                <path d="M2.29 9.62A10 10 0 1 0 21.31 8.35" />
                <path d="M16.24 7.76A6 6 0 1 0 8.23 16.67" />
                <path d="M12 18h.01" />
                <path d="M17.99 11.66A6 6 0 0 1 15.77 16.67" />
                <circle cx="12" cy="12" r="2" />
                <path d="m13.41 10.59 5.66-5.66" />
            </svg>
            Auditoria de admissão
        </h2>
        <ul>
            @foreach (var log in AdmissionAudits)
            {
                <li class="audit-entry">
                    <div><strong>@log.FirstName @log.LastName</strong> – @log.EventName</div>
                    <div>@log.Description</div>
                    <div class="timestamp">@log.ProvisioningDate.ToString("dd/MM/yyyy HH:mm")</div>
                </li>
            }
        </ul>
    </div>
</div>

<footer class="custom-footer">
    <div class="footer-left">
        <span class="footer-item">© 2025 OneID Corp.</span>
        <span class="footer-item">•</span>
        <a href="#" class="footer-link">Política de Privacidade</a>
        <span class="footer-item">•</span>
        <a href="#" class="footer-link">Termos de Uso</a>
    </div>
    <div class="footer-right">
        <span class="footer-muted">OneID: Conectando sua identidade ao futuro ✨</span>
    </div>
</footer>

<script src="js/resize.js"></script>


@code {
    private string OperatorName = "usuário";
    private string AccountId = "desconhecido";
    private string Email = "não informado";
    private List<PendingProcessDto> PendingProcesses = [];
    private List<ActiveSessionInfo> ActiveUsers = new();
    private List<RecentAdmissionDto> RecentAdmissions = [];
    private bool ExpandGrid = false;
    private string LastChecked = string.Empty;
    private bool showLauncher = false;
    private string searchTerm = string.Empty;
    private Timer? debounceTimer;
    private Timer? sessionTimer;


    private readonly Dictionary<string, string> searchRoutes = new(StringComparer.OrdinalIgnoreCase)
{
    { "usuario", "/all" },
    { "usuarios", "/all" },
    { "usuário", "/all" },
    { "usuários", "/all" },
    { "auditoria", "/dashboard#auditoria" },
    { "logs", "/dashboard#iam-logs" },
    { "seguranca", "/dashboard#security-alerts" },
    { "alertas", "/dashboard#security-alerts" },
    { "admissoes", "/dashboard#admissoes" },
    { "processos", "/dashboard#pendentes" },
    { "status", "/dashboard#status" }
};

    private sealed class UserDto
    {
        public string FullName { get; set; }
        public string JobTitleName { get; set; }
        public string DepartmentName { get; set; }
        public string Email { get; set; }
    }

    private List<IamLog> RecentIamLogs = new()
    {
        new IamLog("Rubens", "adicionou role admin para", "Fernanda Lima", DateTime.Now.AddMinutes(-2)),
        new IamLog("Carlos Souza", "removeu acesso de", "João Pedro", DateTime.Now.AddMinutes(-10)),
        new IamLog("Ana Ribeiro", "criou usuário", "Lucas Matos", DateTime.Now.AddHours(-1)),
    };

    private List<SecurityAlert> SecurityAlerts = new()
    {
        new SecurityAlert("Tentativa de login inválido", "Critical", DateTime.Now.AddMinutes(-5)),
        new SecurityAlert("Erro no provisionamento de conta", "Warning", DateTime.Now.AddMinutes(-15)),
    };

    private List<AdmissionAudit> AdmissionAudits = new()
    {
        new AdmissionAudit("Jhon", "Doe", "Admissão iniciada", "Processo iniciado. Aguardando criação do login.", DateTime.Parse("2025-07-05 04:58:34")),
        new AdmissionAudit("Jhon", "Doe", "Login provisionado", "Login foi provisionado no sistema", DateTime.Parse("2025-07-05 04:59:08")),
    };

    public record IamLog(string Actor, string Action, string Target, DateTime Timestamp);
    public record SecurityAlert(string Title, string Level, DateTime Timestamp);
    public record AdmissionAudit(string FirstName, string LastName, string EventName, string Description, DateTime ProvisioningDate);

    private async Task LoadActiveSessions()
    {
        try
        {
            var token = HttpContextAccessor.HttpContext?.Request.Cookies["access_token"];
            if (string.IsNullOrWhiteSpace(token)) return;

            var client = HttpClientFactory.CreateClient("AuthenticatedClient");
            client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

            var response = await client.GetAsync("https://localhost:7200/internal/sessions");
            if (response.IsSuccessStatusCode)
            {
                var sessions = await response.Content.ReadFromJsonAsync<List<ActiveSessionInfo>>();

                Console.WriteLine($"Sessões retornadas do backend: {sessions?.Count ?? 0}");
                if (sessions is not null)
                {
                    foreach (var s in sessions)
                    {
                        Console.WriteLine($"→ Sessão: {s.CircuitId}, IP: {s.IpAddress}, UPN: {s.UpnOrName}");
                    }
                }

                ActiveUsers = sessions ?? [];
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao buscar sessões ativas: {ex.Message}");
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;

        ExpandGrid = await JS.InvokeAsync<bool>("dashboardState.getExpandState");

        var request = HttpContextAccessor.HttpContext?.Request;
        var token = request?.Cookies["access_token"];
        if (string.IsNullOrWhiteSpace(token)) return;

        var handler = new JwtSecurityTokenHandler();
        try
        {

            var jwt = handler.ReadJwtToken(token);
            OperatorName = jwt.Claims.FirstOrDefault(c => c.Type == "name")?.Value ?? "usuário";
            Email = jwt.Claims.FirstOrDefault(c => c.Type == "email")?.Value ?? "não informado";
            AccountId = jwt.Claims.FirstOrDefault(c => c.Type == "account_id")?.Value ?? "desconhecido";
        }
        catch
        {
            OperatorName = "erro ao ler token";
        }

        var client = HttpClientFactory.CreateClient("AuthenticatedClient");
        client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

        var response = await client.GetAsync("https://localhost:7200/v1/pendings");
        if (response.IsSuccessStatusCode)
        {
            var list = await response.Content.ReadFromJsonAsync<List<PendingProcessDto>>();
            PendingProcesses = list ?? [];
        }

        await LoadRecentAdmissions();

        await LoadActiveSessions();

        sessionTimer = new Timer(async _ =>
        {
            await InvokeAsync(LoadActiveSessions);
        }, null, TimeSpan.FromSeconds(5), TimeSpan.FromSeconds(5));


        LastChecked = DateTime.UtcNow.ToLocalTime().ToString("HH:mm:ss");

        await JS.InvokeVoidAsync("enableResize", "widget-pendentes");
        await JS.InvokeVoidAsync("enableResize", "widget-status");
        await JS.InvokeVoidAsync("enableResize", "widget-admissoes");

        StateHasChanged();


    }

    private void VerTodosUsuarios()
    {
        Navigation.NavigateTo("/usuarios");
    }

    private async Task Resume(string correlationId)
    {
        var request = HttpContextAccessor.HttpContext?.Request;
        var token = request?.Cookies["access_token"]
                  ?? request?.Headers["Authorization"].ToString().Replace("Bearer ", "", StringComparison.OrdinalIgnoreCase);

        if (string.IsNullOrWhiteSpace(token))
        {
            Navigation.NavigateTo("/request-token", forceLoad: true);
            return;
        }

        var client = HttpClientFactory.CreateClient("AuthenticatedClient");
        client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

        var payload = new { CorrelationId = correlationId };
        var response = await client.PostAsJsonAsync("https://localhost:7200/v1/staging/resume", payload);

        if (!response.IsSuccessStatusCode) return;

        var json = await response.Content.ReadFromJsonAsync<JsonElement>();
        var requestToken = json.GetProperty("token").GetString();
        var resumedCorrelationId = json.GetProperty("correlationId").GetString();

        await JS.InvokeVoidAsync("OneID.setCookie", "correlation_id", resumedCorrelationId, 5);
        await JS.InvokeVoidAsync("OneID.setCookie", "request_token", requestToken, 5);

        Navigation.NavigateTo("https://localhost:5001/confirm-code", forceLoad: true);
    }

    private void CopiarId(string id)
    {
        JS.InvokeVoidAsync("OneID.copyToClipboard", id);
    }

    private async Task ToggleExpand()
    {
        ExpandGrid = !ExpandGrid;
        await JS.InvokeVoidAsync("dashboardState.saveExpandState", ExpandGrid);
    }

    private void ToggleLauncher()
    {
        showLauncher = !showLauncher;
    }

    [JSInvokable]
    public static Task CloseLauncher()
    {
        Instance?.HideLauncher();
        return Task.CompletedTask;
    }

    private static Dashboard? Instance;

    protected override void OnInitialized()
    {
        Instance = this;
    }

    private void HideLauncher()
    {
        showLauncher = false;
        StateHasChanged();
    }

    private async Task LoadRecentAdmissions()
    {
        var token = HttpContextAccessor.HttpContext?.Request.Cookies["access_token"];
        if (string.IsNullOrWhiteSpace(token)) return;

        var client = HttpClientFactory.CreateClient("AuthenticatedClient");
        client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

        var response = await client.GetAsync("https://localhost:7200/v1/staging/admissions-recents?limit=10");
        if (response.IsSuccessStatusCode)
        {
            var list = await response.Content.ReadFromJsonAsync<List<RecentAdmissionDto>>();
            RecentAdmissions = list ?? [];
        }
    }

    public class PendingProcessDto
    {
        public string CorrelationId { get; set; } = string.Empty;
        public string FullName { get; set; } = string.Empty;
        public DateTime CreatedAt { get; set; }
    }

    public class RecentAdmissionDto
    {
        public DateTimeOffset ProvisioningAt { get; set; }
        public string FullName { get; set; } = string.Empty;
        public string JobTitleName { get; set; } = string.Empty;
        public string DepartmentName { get; set; } = string.Empty;
        public string Company { get; set; } = string.Empty;
        public string LoginManager { get; set; } = string.Empty;
        public string AccountId { get; set; } = string.Empty;
    }

    private List<string> suggestions = [];
    private bool showSuggestions = false;

    private void OnSearchInput(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? string.Empty;

        debounceTimer?.Dispose();
        debounceTimer = new Timer(OnSearchDebounced, null, 400, Timeout.Infinite);

        var input = NormalizeSearch(searchTerm);
        suggestions = searchRoutes.Keys
            .Where(k => NormalizeSearch(k).Contains(input))
            .Distinct()
            .Take(5)
            .ToList();

        showSuggestions = suggestions.Any();
    }

    private void SelectSuggestion(string term)
    {
        searchTerm = term;
        showSuggestions = false;
        StateHasChanged();
    }


    private void OnSearchDebounced(object? _)
    {
        var normalized = NormalizeSearch(searchTerm);

        foreach (var kv in searchRoutes)
        {
            if (normalized.Contains(NormalizeSearch(kv.Key)))
            {
                InvokeAsync(() => Navigation.NavigateTo(kv.Value));
                break;
            }
        }
    }

    public void Dispose()
    {
        sessionTimer?.Dispose();
        debounceTimer?.Dispose();
    }

    private static string NormalizeSearch(string input)
    {
        if (string.IsNullOrWhiteSpace(input))
            return string.Empty;

        var normalized = input.Normalize(NormalizationForm.FormD);
        var sb = new StringBuilder();

        foreach (var c in normalized)
        {
            if (CharUnicodeInfo.GetUnicodeCategory(c) != UnicodeCategory.NonSpacingMark)
                sb.Append(char.ToLowerInvariant(c));
        }

        return sb.ToString();
    }

    private string FormatTimeSmart(DateTime timestamp)
    {
        var localTime = timestamp.ToLocalTime();
        var diff = DateTime.Now - localTime;

        if (diff.TotalSeconds < 60)
            return $"há {diff.Seconds} segundos";
        if (diff.TotalMinutes < 60)
            return $"há {diff.Minutes} minutos";
        if (diff.TotalHours < 12)
            return $"há {diff.Hours} horas";

        return localTime.ToString("dd/MM/yyyy 'às' HH:mm");
    }

    private static string ParseUserAgent(string userAgent)
    {
        if (string.IsNullOrWhiteSpace(userAgent)) return "Navegador desconhecido";

        if (userAgent.Contains("Firefox", StringComparison.OrdinalIgnoreCase))
            return "Firefox";
        if (userAgent.Contains("Chrome", StringComparison.OrdinalIgnoreCase))
            return "Chrome";
        if (userAgent.Contains("Safari", StringComparison.OrdinalIgnoreCase) && !userAgent.Contains("Chrome"))
            return "Safari";
        if (userAgent.Contains("Edg", StringComparison.OrdinalIgnoreCase))
            return "Edge";
        if (userAgent.Contains("Windows", StringComparison.OrdinalIgnoreCase))
            return "Windows";
        if (userAgent.Contains("Linux", StringComparison.OrdinalIgnoreCase))
            return "Linux";
        if (userAgent.Contains("Macintosh", StringComparison.OrdinalIgnoreCase))
            return "macOS";

        return "Navegador desconhecido";
    }

    private string FormatRemainingTime(TimeSpan timeLeft)
    {
        if (timeLeft.TotalSeconds <= 0)
            return "expirado";

        return $"{(int)timeLeft.TotalMinutes}min {timeLeft.Seconds}s";
    }

    public record ActiveSessionInfo(
    string CircuitId,
    string IpAddress,
    string UpnOrName,
    string UserAgent,
    DateTime LastActivity,
    DateTime ExpiresAt
    )
    {
        public TimeSpan TimeToExpire => ExpiresAt - DateTime.Now;
        public bool IsExpiringSoon => TimeToExpire < TimeSpan.FromMinutes(1);
    }

}