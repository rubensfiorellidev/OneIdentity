@using System.Net
@using Microsoft.AspNetCore.Components.Server.Circuits
@inject IHttpClientFactory HttpClientFactory
@inject ILogger<TokenRefresher> Logger
@inject NavigationManager Navigation
@inject IServiceProvider ServiceProvider
@implements IDisposable
@using OneID.WebApp.Services

@code {
    private PeriodicTimer? _timer;
    private readonly TimeSpan _checkInterval = TimeSpan.FromMinutes(4);
    private CancellationTokenSource _cts = new();

    protected override void OnInitialized()
    {
        Logger.LogInformation("TokenRefresher iniciado. Verificando validade do token a cada {Interval}...", _checkInterval);

        _timer = new PeriodicTimer(_checkInterval);
        _ = LoopTokenRefreshAsync();
    }

    private async Task LoopTokenRefreshAsync()
    {
        while (await _timer!.WaitForNextTickAsync(_cts.Token))
        {
            await InvokeAsync(async () =>
            {
                try
                {
                    await CheckAndRefreshTokenAsync();
                }
                catch (Exception ex)
                {
                    Logger.LogError(ex, "Erro inesperado ao renovar token.");
                    TryNavigateSafely("/request-token");
                }
            });
        }
    }

    private async Task CheckAndRefreshTokenAsync()
    {
        var client = HttpClientFactory.CreateClient("AuthenticatedClient");
        var response = await client.PostAsync("v1/auth/refresh-token", null, _cts.Token);

        if (response.StatusCode == HttpStatusCode.Unauthorized)
        {
            Logger.LogWarning("Refresh token expirado. Redirecionando para /request-token...");
            TryNavigateSafely("/request-token");
            return;
        }

        if (!response.IsSuccessStatusCode)
        {
            Logger.LogWarning("Erro ao renovar token. Status: {StatusCode}", response.StatusCode);
            return;
        }

        Logger.LogInformation("Token renovado automaticamente com sucesso.");
    }

    private void TryNavigateSafely(string path)
    {
        try
        {
            var currentPath = Navigation.ToBaseRelativePath(Navigation.Uri);

            if (!currentPath.StartsWith("request-token", StringComparison.OrdinalIgnoreCase))
            {
                Navigation.NavigateTo(path, forceLoad: true);
            }
            else
            {
                Logger.LogInformation("Usuário já está em /request-token. Navegação ignorada.");
            }
        }
        catch (Exception ex)
        {
            Logger.LogWarning(ex, "Erro ao tentar navegar.");
        }
    }

    public void Dispose()
    {
        _cts.Cancel();

        try
        {
            _timer?.Dispose();
        }
        catch (ObjectDisposedException) { }

        _cts.Dispose();
    }
}
