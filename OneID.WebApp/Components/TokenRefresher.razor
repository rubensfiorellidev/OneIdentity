@using System.Net
@inject IHttpClientFactory HttpClientFactory
@inject ILogger<TokenRefresher> Logger
@inject NavigationManager Navigation

@code {
    private PeriodicTimer? _timer;
    private readonly TimeSpan _checkInterval = TimeSpan.FromMinutes(4);
    private CancellationTokenSource _cts = new();

    protected override void OnInitialized()
    {
        Logger.LogInformation("TokenRefresher iniciado. Verificando validade do token a cada {Interval}...", _checkInterval);

        _timer = new PeriodicTimer(_checkInterval);

        _ = LoopTokenRefreshAsync();
    }

    private async Task LoopTokenRefreshAsync()
    {
        while (await _timer!.WaitForNextTickAsync(_cts.Token))
        {
            await InvokeAsync(async () =>
            {
                try
                {
                    await CheckAndRefreshTokenAsync();
                }
                catch (Exception ex)
                {
                    Logger.LogError(ex, "Erro inesperado ao renovar token.");
                    Navigation.NavigateTo("/request-token", forceLoad: true);
                }
            });
        }
    }

    private async Task CheckAndRefreshTokenAsync()
    {
        var client = HttpClientFactory.CreateClient("OneID.ApiClient");
        var response = await client.PostAsync("v1/auth/refresh-token", null, _cts.Token);

        if (response.StatusCode == HttpStatusCode.Unauthorized)
        {
            Logger.LogWarning("Refresh token expirado. Redirecionando para /request-token...");
            if (!_cts.IsCancellationRequested)
            {
                try
                {
                    Navigation.NavigateTo("/request-token", forceLoad: true);
                }
                catch (NavigationException navEx)
                {
                    Logger.LogWarning(navEx, "Navegação falhou: circuito pode ter sido finalizado.");
                }
            }

            return;
        }


        if (!response.IsSuccessStatusCode)
        {
            Logger.LogWarning("Erro ao renovar token. Status: {StatusCode}", response.StatusCode);
            return;
        }

        Logger.LogInformation("Token renovado automaticamente com sucesso.");
    }

    public void Dispose()
    {
        _cts.Cancel();

        try
        {
            _timer?.Dispose();
        }
        catch (ObjectDisposedException) { }

        _cts.Dispose();
    }
}
